apiVersion: v1
kind: ConfigMap
metadata:
  name: mlflow-postgres-config
  labels:
    app: mlflow-postgres
data:
  POSTGRES_DB: mlflow_db         # for image postgres:11 on minikube
  POSTGRES_USER: mlflow_user     # for image postgres:11 on minikube
  POSTGRES_PASSWORD: mlflow_pwd  # for image postgres:11 on minikube
  PGDATA: /var/lib/postgresql/mlflow/data # for image postgres:11 on minikube
  # POSTGRESQL_DATABASE: mlflow_db            # for image from openshift
  # POSTGRESQL_USER: mlflow_user              # for image from openshift
  # POSTGRESQL_PASSWORD: mlflow_pwd           # for image from openshift
  # PGDATA: /var/lib/postgresql/mlflow/data   # for image from openshift
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mlflow-postgres
  labels:
    app: mlflow-postgres
spec:
  selector:
    matchLabels:
      app: mlflow-postgres
  serviceName: "mlflow-postgres-service"
  replicas: 1
  template:
    metadata:
      labels:
        app: mlflow-postgres
    spec:
      containers:
      - name: mlflow-postgres
        image: postgres:11 #image-registry.openshift-image-registry.svc:5000/openshift/postgresql:latest #postgres:11
        imagePullPolicy: IfNotPresent # this line was not present!
        ports:
        - containerPort: 5432
          protocol: TCP
        envFrom:
        - configMapRef:
            name: mlflow-postgres-config
        resources:
          requests:
            memory: "200Mi"
            cpu: "500m"
        volumeMounts:
        - name: mlflow-pvc-2
          mountPath: /var/lib/postgresql/mlflow
  volumeClaimTemplates:
  - metadata:
      name: mlflow-pvc-2
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-postgres-service
  labels:
    svc: mlflow-postgres-service
spec:
  type: NodePort
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: mlflow-postgres